# data file for pack-rig.mod
# Original AMPL coding by Sven Leyffer, University of Dundee

param n := 4;

# ... discretization (element/node table, conforming triangles)
set elements :=
    (     1,     2,     6 )
    (     7,     6,     2 )
    (     2,     3,     7 )
    (     8,     7,     3 )
    (     3,     4,     8 )
    (     9,     8,     4 )
    (     4,     5,     9 )
    (    10,     9,     5 )
    (     6,     7,    11 )
    (    12,    11,     7 )
    (     7,     8,    12 )
    (    13,    12,     8 )
    (     8,     9,    13 )
    (    14,    13,     9 )
    (     9,    10,    14 )
    (    15,    14,    10 )
    (    11,    12,    16 )
    (    17,    16,    12 )
    (    12,    13,    17 )
    (    18,    17,    13 )
    (    13,    14,    18 )
    (    19,    18,    14 )
    (    14,    15,    19 )
    (    20,    19,    15 )
    (    16,    17,    21 )
    (    22,    21,    17 )
    (    17,    18,    22 )
    (    23,    22,    18 )
    (    18,    19,    23 )
    (    24,    23,    19 )
    (    19,    20,    24 )
    (    25,    24,    20 );

# ... i-j coordinates (i=0 => x=0, i=n => x=1 etc)
param: i_ref, j_ref   :=
    1    0    0
    2    1    0
    3    2    0
    4    3    0
    5    4    0
    6    0    1
    7    1    1
    8    2    1
    9    3    1
   10    4    1
   11    0    2
   12    1    2
   13    2    2
   14    3    2
   15    4    2
   16    0    3
   17    1    3
   18    2    3
   19    3    3
   20    4    3
   21    0    4
   22    1    4
   23    2    4
   24    3    4
   25    4    4;

# ... boundary nodes
set bnd_nodes := 1,   2,   3,   4,   5,  10,  15,  20,   
                 6,  11,  16,  21,  25,  24,  23,  22;

# ... boundary conditions
let{i in bnd_nodes} u0[i] := 0.0;

# ... region, where membrane is fixed to obstacle (in interior)
let Omega0 := { };
for {k in int_nodes} 
   if (n<=4*i_ref[k])&&(4*i_ref[k]<=2*n)&&
      (n<=4*j_ref[k])&&(4*j_ref[k]<=3*n)
   then {let Omega0 := Omega0 union { k }};

# ... set fixed nodes
let fix_nodes := { };
for {k in nodes}
   if (i_ref[k]<=n/2) then { let fix_nodes := fix_nodes union { k } };




